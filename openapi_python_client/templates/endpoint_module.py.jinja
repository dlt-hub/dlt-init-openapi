from http import HTTPStatus
from typing import Any, Dict, List, Optional, Union, cast, Iterator
import dlt

from dlt.sources.helpers import requests

from ..types import UNSET, Unset
from ..utils import extract_nested_data, extract_iterate_parent
from ..api_helpers import fetch_json

{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params,
    arguments, resource_arguments, kwargs, transformer_kwargs, parse_response, docstring %}

{# {% set return_string = endpoint.response_type() %} #}
{% set return_string = "Any" %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "Any" %}

{% if endpoint.transformer %}
@dlt.transformer(table_name="{{ endpoint.table_name}}")
def {{ endpoint.python_name }}({{ resource_arguments(endpoint) | indent(4) }}) -> Iterator[{{ return_string}}]:
{% else %}
@dlt.resource(table_name="{{ endpoint.table_name }}")
def {{ endpoint.python_name }}({{ resource_arguments(endpoint) | indent(4) }}) -> Iterator[{{ return_string}}]:
{% endif %}
    {{ docstring(endpoint, return_string, is_detailed=false) | indent(4) }}
    endpoint_url = "{{ endpoint.path }}"
    params_meta = {{ endpoint.request_args_meta_str }} 
    {% if endpoint.transformer %}
    for child_kwargs in extract_iterate_parent(data, parent_property_path, path_parameter_name, "{{ endpoint.path }}"):
        params = dict(
            {{ transformer_kwargs(endpoint) }}
            **child_kwargs
        )
        data = fetch_json(base_url, endpoint_url, params, params_meta)
        yield from extract_nested_data(data, data_json_path)
    {% else %}
    params = dict({{kwargs(endpoint)}})
    data = fetch_json(base_url, endpoint_url, params, params_meta)
    yield from  extract_nested_data(data, data_json_path)
    {% endif %}
