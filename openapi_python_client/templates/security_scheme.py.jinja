{% macro generate_security_scheme(scheme) %}
from typing import Literal

from dlt.common.configuration.specs.base_configuration import BaseConfiguration, configspec

from ._base import _ApiKeyCredentialsBase, _HttpBasicCredentialsBase, _HttpBearerCredentialsBase, _OAuth2CredentialsBase


{% if scheme.type == "apiKey" %}
class {{ scheme.class_name }}(_ApiKeyCredentialsBase):
    location: Literal["{{ scheme.location }}"] = "{{ scheme.location }}"
    name: Literal["{{ scheme.name }}"] = "{{ scheme.name }}"
    
{% elif scheme.type == "http" and scheme.scheme == "basic" %}
class {{ scheme.class_name }}(_HttpBasicCredentialsBase):
    pass
{% elif scheme.type == "http" and scheme.scheme == "bearer" %}
class {{ scheme.class_name }}(_HttpBearerCredentialsBase):
    pass
{% elif scheme.type == "oauth2" %}
class {{ scheme.class_name }}(_OAuth2CredentialsBase):
    pass
{% endif %}
{% endmacro %}
