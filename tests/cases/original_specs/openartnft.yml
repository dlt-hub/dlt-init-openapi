openapi: 3.1.0
info:
  title: FastAPI
  version: 0.1.0
paths:
  /token:
    post:
      tags:
        - Auth
      summary: Login For Access Token
      description: >-
        Allow login an user for access token 

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - device: Device from connected

        - place: coordinates

        - language: Language on which emails on case of be necessary would be
        sent 

        - OTPCode: If authenticates with One Time Password, that code

         <h3> Body</h3>
        - form_data: Form data from type OAuth
           - client_id: gallery code needed to check to what gallery tries to connect
           - username
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - access_token: token

        - token_type: "bearer"
      operationId: login_for_access_token_token_post
      parameters:
        - required: false
          schema:
            type: string
            title: Device
            default: ''
          name: device
          in: query
        - required: false
          schema:
            type: string
            title: Place
            default: ''
          name: place
          in: query
        - required: false
          schema:
            type: string
            title: Language
            default: en
          name: language
          in: query
        - required: false
          schema:
            type: string
            title: Otpcode
            default: ''
          name: OTPCode
          in: query
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_for_access_token_token_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token
      description: >-
        Allow an user refresh access token 

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - device: Device from connected

        - place: coordinates

        - language: Language on which emails on case of be necessary would be
        sent 

        - OTPCode: If authenticates with One Time Password, that code

         <h3> Body</h3>
        - refresh_token: token
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - access_token: token

        - refresh_token: token

        - token_type: "bearer"
      operationId: refresh_access_token_refresh_post
      parameters:
        - required: false
          schema:
            type: string
            title: Device
            default: ''
          name: device
          in: query
        - required: false
          schema:
            type: string
            title: Place
            default: ''
          name: place
          in: query
        - required: false
          schema:
            type: string
            title: Language
            default: en
          name: language
          in: query
        - required: false
          schema:
            type: string
            title: Otpcode
            default: ''
          name: OTPCode
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/me/:
    get:
      tags:
        - Auth
      summary: Read Users Me
      operationId: read_users_me_auth_me__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - OAuth2PasswordBearer: []
  /auth/me/items/:
    get:
      tags:
        - Auth
      summary: Read Own Items
      operationId: read_own_items_auth_me_items__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /auth/token-verify/:
    post:
      tags:
        - Auth
      summary: Token Verify
      operationId: token_verify_auth_token_verify__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /auth/register/:
    post:
      tags:
        - Auth
      summary: Register User
      description: >-
        Register user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **email**: User email

        - **password**: User password

        - **username**

        - **tokenCaptcha**: google recaptchav3

        - **device**: User device (important to send for login)

        - **place**: Coordinates from user

        - **ip**: Ip from user (important to send for login)

        - language: language on wich mail activation will be send english by
        default, ES for spanish
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: {"validation_token":validation_token}
      operationId: register_user_auth_register__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/auth/activate/{validation_token}':
    get:
      tags:
        - Auth
      summary: Activate User
      description: >-
        Allow user confirm account after recived activation email 

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Path</h3>
        - **validation_token**: Code sent on mail


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error or success

        - result:
      operationId: activate_user_auth_activate__validation_token__get
      parameters:
        - required: true
          schema:
            type: string
            title: Validation Token
          name: validation_token
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/auth/connection-auth/{validation_token}':
    get:
      tags:
        - Auth
      summary: Activate Connection
      description: >-
        This endpoint allow to authorize a device after get an email with the
        validation token  


        -------------------------------------------------------------------------------  

        <h2>Parameters:</h2>

        <h3> Path</h3>

        - validation_token(str): Token from the mail sended to user  
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - success

        - result if authorize the connection

        - message in case of error
      operationId: activate_connection_auth_connection_auth__validation_token__get
      parameters:
        - required: true
          schema:
            type: string
            title: Validation Token
          name: validation_token
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/pass-recovery/:
    post:
      tags:
        - Auth
      summary: Obtainuserpass
      description: >-
        Allow user to request new password in case of forgotten that will be
        send to user email with a link

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **email**: User email where will receive the key to change user
        password

        - **tokenCaptcha**: google recatpchaV3

        - language: language on wich mail will be send english by default, ES
        for spanish
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error or success

        - result
      operationId: ObtainUserPass_auth_pass_recovery__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverPass'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/reset-password/:
    post:
      tags:
        - Auth
      summary: Activatepass
      description: >-
        Allow user to change password using activation key from mail

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **activationKey**: key send on email

        - **pass_**: new password

        - **pass2**: repeat new password

        - otpCode code OTP

        - **tokenCaptcha** google recatpchaV3
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error or success

        - result
      operationId: ActivatePass_auth_reset_password__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPass'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/pass-change/:
    post:
      tags:
        - Auth
      summary: Changepassword
      description: >-
        Allow user to change password been loged and knowing old password

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **pass_**: new password

        - **oldPass**: repeat new password

        - otpCode code OTP

        - **tokenCaptcha** google recatpchaV3
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error or success

        - result
      operationId: ChangePassword_auth_pass_change__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePass'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /auth/enableOTP/:
    post:
      tags:
        - Auth
      summary: Enableotp
      description: >-
        Allow user getting OTP key and qr code


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result {"secretKey" : secret,"qrcode" : qrcode}
      operationId: enableOTP_auth_enableOTP__post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /auth/DeactivateOTP/:
    post:
      tags:
        - Auth
      summary: Deactivateotp
      description: >-
        Allow user to disable OTP

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **OTPCode** code OTP


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error or success

        - result
      operationId: deactivateOTP_auth_DeactivateOTP__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPCode'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /auth/validateOTP/:
    post:
      tags:
        - Auth
      summary: Validateotp
      description: >-
        Allow activate and verify the users otp,  first user have to request the
        otp key using enableOTP endpoint

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **OTPCode** code OTP

        - **pass_**: user password

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result String describing success
      operationId: validateOTP_auth_validateOTP__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOTPCode'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /auth/register-gallerist/:
    post:
      tags:
        - Auth
      summary: Register User Gallerist
      description: >-
        Register user of type gallerist

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2> 
         <h3> Body</h3>
        - **email**: User email

        - **password**: User password

        - **username**

        - **firstname**

        - **lastname_1**

        - lastname_2

        - **tokenCaptcha**: google recaptchav3

        - **device**: User device (important to send for login)

        - **place**: Coordinates from user

        - **ip**: Ip from user (important to send for login)

        - type: public, private if people can see gallery

        - category: photo, video..

        - language: language on wich mail activation will be send english by
        default, ES for spanish
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: {"validation_token":validation_token}
      operationId: register_user_gallerist_auth_register_gallerist__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGalleryRegister'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/msm/:
    get:
      tags:
        - AuthMSM
      summary: Msm Login
      operationId: msm_login_auth_msm__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /auth/msm/logout/:
    get:
      tags:
        - AuthMSM
      summary: Msm Unlogin
      operationId: msm_unlogin_auth_msm_logout__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /auth/external:
    post:
      tags:
        - AuthMSM
      summary: Login For Access Token
      description: |-
        This endpoint allow login an user for access token on external service

        ### Request
        - HTTP Method: **POST**
        - Path Parameters:
            - **id**: The ID of the user to update (UUID, required)
        - Query Parameters: **none**
        - Request Body: **JSON**
            - **code**: Code obtained from external page
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The user ID, if the request was successful
      operationId: login_for_access_token_auth_external_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/External'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /transactions/:
    get:
      tags:
        - Transactions
      summary: Get Transactions
      description: >-
        Gets transactions list ordered by ascending timestamp for a given
        user.  
            Optionally the asset can be specified and only transactions for that asset will be returned.  
            Also one or more transaction type ID can be specified as a query parameter.  

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - asset_symbol: The asset symbol (e.g. BTC or ETH)

        - type: one or more transaction type IDs can be specified as a query
        parameter.  
            Available transaction type IDs are:

            - 0: Withdrawal
            - 1: Deposit
            - 2: Sell
            - 3: Buy
            - 10: Settlement
            - 11: Accrual
            - 100: Promotion  
            - 101: Promotion claim

            Example (get deposits and withdrawals): /{user_uuid}/?asset_symbol={asset_symbol}&type=0&type=1

            Note that only transactions made to or from the wallets associated with the client that makes the request will be shown.
        - skip

        - limit

        - from_dt: from datetime  

        - to_dt: to datetime 

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: List if transactions
      operationId: get_transactions_transactions__get
      parameters:
        - required: false
          schema:
            type: string
            title: Asset Symbol
          name: asset_symbol
          in: query
        - required: false
          schema:
            items:
              type: integer
            type: array
            title: Type
            default:
              - 0
              - 1
          name: type
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: string
            title: From Dt
          name: from_dt
          in: query
        - required: false
          schema:
            type: string
            title: To Dt
          name: to_dt
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /transactions/withdrawals/:
    post:
      tags:
        - Transactions
      summary: Create Withdrawal
      description: >-
        Creates a new transaction of type withdrawal and send confirmation mail.

         In a withdrawal, the transaction ID and other network parameters (fees, confirmations, timestamp, etc.) can be omitted (will be added when publishing the transaction)  
           
         ---------------------------------------------------------------------------------------------------------------------------------------------------------
         <h2>Parameters:</h2>
         <h3>Body:</h3>

         - wallet_user_uuid (str): The user UUID that makes the withdrawal request (Optional)
         - **asset_symbol** (str): The asset symbol (e.g. BTC or ETH)
         - wallet_address (str): Origin wallet address (Optional)
         - transaction_id (str): Transaction ID, if it is already known  (Optional)
         - **amount** (str): Transferred amount
         - internal  (bool): Whether the transaction is internal to the platform or published in the network (Optional)
         - **receiver**  (str): The receiver wallet address
           
        ---------------------------------------------------------------------------------------------------------------
         <h2>Returns</h2>  
         Standard response object  
         - success: True/False  
         - message: String describing error/success
      operationId: create_withdrawal_transactions_withdrawals__post
      parameters:
        - required: false
          schema:
            type: string
            title: Language
            default: en
          name: language
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Withdrawal'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/transactions/withdrawals/confirm/{validation_token}':
    get:
      tags:
        - Transactions
      summary: Confirm Withdrawal
      description: >-
        Confirm a transaction by passing the validation_token  

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **validation_token**(str): Token from the mail sended to user  
           
        ---------------------------------------------------------------------------------
         <h2>Returns</h2>  
        Standard response object  

        - success: True/False  

        - message: String describing error

        - result: The transaction information. If it is internal, an object with
        the internal withdrawal and deposit information is returned.  
            - status (int): Transaction status (unpublished (0), completed (1), pending confirmation (2), cancelled (3), ...)
      operationId: >-
        confirm_withdrawal_transactions_withdrawals_confirm__validation_token__get
      parameters:
        - required: true
          schema:
            type: string
            title: Validation Token
          name: validation_token
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/wallets/{asset_symbol}/':
    get:
      tags:
        - Wallet
      summary: Get User Wallet
      description: >-
        Gets user wallet on one asset.

        Gets the deposit wallets for an user an asset associated with the client
        that makes the request.


        If the user is new, it is not necessary to create it (POST
        .../users/{user_uuid}/) before calling this endpoint, it will be created
        automatically.


        It will only return the deposit wallets for the asset (that must be
        available for the client that makes the request). In that case, if the
        user does not have any deposit wallet yet for that client, then it will
        create a new one and return it.
            If user don't have wallet will create one.

        ------------------------------------------------------------------------------------------------------------  


        <h2>Parameters:</h2>

        <h3>Path:</h3>

        - asset_symbol (str): The asset symbol (e.g. BTC or ETH)
              
        ----------------------------------------------------------------------------------------------------------------  


        <h2>Returns</h2>  

        Standard response object  

        - success: True/False  

        - message: String describing error  

        - result: List of wallets
      operationId: get_user_wallet_wallets__asset_symbol___get
      parameters:
        - required: true
          schema:
            type: string
            title: Asset Symbol
          name: asset_symbol
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /account/getbalance/:
    post:
      tags:
        - Account
      summary: Get Balance
      description: >-
        When user is loged returns his balance of coins on their currencies


        ----------------------------------------------------------------------------------------------------------------  


        <h2>Returns</h2>  

        Standard response object  

        - success: True/False  

        - message: String describing error  

        - result: List of assets with its current balance
      operationId: get_balance_account_getbalance__post
      parameters:
        - required: false
          schema:
            type: string
            title: Asset
            default: ''
          name: asset
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/fav/check/{item_id}':
    get:
      tags:
        - Favourites
      summary: Read Product Favourite
      description: >-
        Return if item is favourite or not, user must be loged

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **item_id**(uuid): id of product
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: True/False
      operationId: read_product_favourite_fav_check__item_id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Item Id
          name: item_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /fav/mark/:
    post:
      tags:
        - Favourites
      summary: Mark Item Favourite
      description: >-
        Allow mark a item as favourite  

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>  
         - **item_id** : id of item
         - **user_id** : id of user
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id of item and user
      operationId: mark_item_favourite_fav_mark__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product_Favourite'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/fav/unmark/{item_id}':
    delete:
      tags:
        - Favourites
      summary: Unmark Item Favourite
      description: |-
        Allow mark a product a favourite 
        - item_id : id of product
      operationId: unmark_item_favourite_fav_unmark__item_id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Item Id
          name: item_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /items/fav/:
    get:
      tags:
        - Favourites
      summary: Read Item Favourite By User
      description: >-
        Return all items favourites from user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>  

        - order: created_last or default

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request   
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: List of categories
      operationId: read_item_favourite_by_user_items_fav__get
      parameters:
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: Read User By Id
      description: >-
        Return an user by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id of user
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: user
      operationId: read_user_by_id_users__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    put:
      tags:
        - Users
      summary: Update User
      description: |-
        Allow update a user  
            h2>Parameters:</h2>
            <h3> Path</h3>
            - id: user id 
            <h3> Body</h3>
            - **username**  
            - **firstname**  
            - **lastname_1**  
            - lastname_2 - Optional  
            - phone - Optional  
            - id_number - Optional
      operationId: update_user_users__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Users
      summary: Delete User
      description: |-
        Delete a user
        - id: id of user
      operationId: delete_user_users__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/:
    get:
      tags:
        - Users
      summary: Read User Filtered
      description: >-
        Return all users

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by username

        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_user_filtered_users__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Gallery Id
          name: gallery_id
          in: query
        - required: false
          schema:
            type: integer
            title: User Type
          name: user_type
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    post:
      tags:
        - Users
      summary: Create User
      description: |-
        Create a user
        - username: unique name of user
        - email: unique email of user
        - password: min length 4
        - firstname: optional
        - lastname: optional
      operationId: create_user_users__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/avatar/{id}':
    put:
      tags:
        - Users
      summary: Update User Avatar
      description: |-
        Allow update an user  avatar
            - id: user id         
            - avatar
      operationId: update_user_avatar_avatar__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAvatarUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/site-image/{id}':
    put:
      tags:
        - Users
      summary: Update User Site Image
      description: |-
        Allow update an user site_image 
            - id: user id         
            - site_image
      operationId: update_user_site_image_site_image__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSiteImageUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/extra-image/{id}':
    put:
      tags:
        - Users
      summary: Update User Extra Image
      description: |-
        Allow update an user extra_image 
            - id: user id         
            - site_image: b64
      operationId: update_user_extra_image_extra_image__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserExtraImageUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /authors/:
    get:
      tags:
        - Users
      summary: Read Authors Filtered
      description: >-
        Return the users who had created items

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        - paged: if show total record an links to paginate request

        - gallery: id of gallery of user

        ---------------------------------------------------------------

        - total: total items created  

        - id: user id
      operationId: read_authors_filtered_authors__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Gallery
          name: gallery
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/profile/{id}':
    get:
      tags:
        - Profile
      summary: Read User Public Data By Id
      description: |-
        Return a user
        - id: id of user
      operationId: read_user_public_data_by_id_profile__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            format: uuid
            title: Site-Id
          name: site-id
          in: header
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /profiles/:
    get:
      tags:
        - Profile
      summary: Read Users Public Data
      description: >-
        Return all users without be loged

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - user_type: user_type 1 regular, 3 gallerist

        - q: filter by name

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_users_public_data_profiles__get
      parameters:
        - required: false
          schema:
            type: integer
            title: User Type
          name: user_type
          in: query
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/files/user_images/{name}':
    get:
      tags:
        - Users
      summary: Read Image File By Name
      description: |-
        Return an image by name
        - name: name.extension
      operationId: read_image_file_by_name_files_user_images__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /gallery/create-artist/:
    post:
      tags:
        - Users
      summary: Create User
      description: |-
        Create a user
        - username: unique name of user
        - email: unique email of user
        - password: min length 4
        - firstname: optional
        - lastname: optional
      operationId: create_user_gallery_create_artist__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /user/artists/:
    get:
      tags:
        - Users
      summary: Read Artist
      description: >-
        Return all artist from galeries

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_artist_user_artists__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/gallery/artists/{galery_id}':
    get:
      tags:
        - Profile
      summary: Read Artist
      description: >-
        Return all artist from galeries without login

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_artist_gallery_artists__galery_id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Galery Id
          name: galery_id
          in: path
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            title: Gallery
            default: false
          name: gallery
          in: query
        - required: false
          schema:
            type: boolean
            title: Disabled
          name: disabled
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/advices/{id}':
    get:
      tags:
        - Advices
      summary: Read Asset By Id
      description: >-
        Return an advice by id (Trying to figure out why don't return
        advice_type name)

        - id: advice identifier
      operationId: read_asset_by_id_advices__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /advices/:
    get:
      tags:
        - Advices
      summary: Read Advice Filtered
      description: >-
        Return all advices

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name
      operationId: read_advice_filtered_advices__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Advices
      summary: Create Advice
      description: |-
        Creates an advice
        - title
        - text
        - advice_type_id id from advice type (Optional)
      operationId: create_advice_advices__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advice'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/advice/{id}':
    put:
      tags:
        - Advices
      summary: Update Advice
      description: |-
        Allow update a advice  
        - id: advice id 

        - title
        - text
        - advice_type_id: id of advice_type (Optional)
      operationId: update_advice_advice__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdviceUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Advices
      summary: Delete Advice
      description: |-
        Delete an advice
        - id: id of advice
      operationId: delete_advice_advice__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/advice-type/{id}':
    get:
      tags:
        - Advice Types
      summary: Read Advice Type By Id
      description: >-
        Return an advice_type by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id of adviceType
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: advice_type
      operationId: read_advice_type_by_id_advice_type__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /advice-types/:
    get:
      tags:
        - Advice Types
      summary: Read Advice Type Filtered
      description: >-
        Return a list of advice_type

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: advice_type list
      operationId: read_advice_type_filtered_advice_types__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Advice Types
      summary: Create Advice Type
      description: >-
        Creates an advice_type

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>

        - **name**: name of advice_type
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id of advice_type
      operationId: create_advice_type_advice_types__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advice_type'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/advice-types/{id}':
    put:
      tags:
        - Advice Types
      summary: Update Advice Type
      description: >-
        Allow update an advice_type

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of advice_type  


        <h3> Body</h3>  

        -  **name**: name of advice_type

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of advice_type
      operationId: update_advice_type_advice_types__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advice_type'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Advice Types
      summary: Delete Advice Type
      description: >-
        Delete an advice_type

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of advice_type
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of advice_type
      operationId: delete_advice_type_advice_types__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/category-trees/{id}':
    get:
      tags:
        - Category Trees
      summary: Read Category Tree By Id
      description: >-
        Return a category_tree by id and site_id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: category_tree
      operationId: read_category_tree_by_id_category_trees__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            format: uuid
            title: Site-Id
          name: site-id
          in: header
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Category Trees
      summary: Update Category Tree
      description: >-
        Allow update a category_tree

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of category_tree  


        <h3> Body</h3>  

        - **name**
         - **description**
         - user_id
         - image: b64 to show on app category
         - is_root: true by now must be allways true (there is no tree)
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of category_tree
      operationId: update_category_tree_category_trees__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_tree'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Category Trees
      summary: Delete Categoty Tree
      description: >-
        Delete a category_tree

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of category_tree
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of category_tree
      operationId: delete_categoty_tree_category_trees__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /category-trees/:
    get:
      tags:
        - Category Trees
      summary: Read Category Tree Filtered
      description: >-
        Return all category_trees

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name

        - gallery: gallery UUID

        - active: if category is active (to display it or not)

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)  
               - asc: less to more  
               - desc: more to less (default)  
               - name_asc: name from a to z  
               - name_desc: name from z to a  
               - aZ_author: name author from a to z  
               - zA_author: name author from z to a  
               - max_like: order by more favourites  
               - min_like: order by less favourites   
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: List of categories
      operationId: read_category_tree_filtered_category_trees__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Author
          name: author
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Gallery
          name: gallery
          in: query
        - required: false
          schema:
            type: boolean
            title: Active
          name: active
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Category Trees
      summary: Create Category Tree
      description: >-
        Creates a category_tree


        ---------------------------------------------

        <h2>Parameters:</h2>

         <h3> Body</h3>  
         - **name**
         - **description**
         - user_id
         - image: b64 to show on app category
         - is_root: true by now must be allways true (there is no tree)

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id
      operationId: create_category_tree_category_trees__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_tree'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/category-trees/user/{user_id}':
    get:
      tags:
        - Category Trees
      summary: Read Category Tree Filtered By User
      description: >-
        Return all category_tree filtered by user


        ---------------------------------------------

        <h2>Parameters:</h2>

         <h3> Path</h3>  
         - user_id: id of user that created the category

         <h3> Query </h3>  
        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: List of categories
      operationId: read_category_tree_filtered_by_user_category_trees_user__user_id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: User Id
          name: user_id
          in: path
        - required: false
          schema:
            type: boolean
            title: Unique
            default: false
          name: unique
          in: query
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: boolean
            title: Active
          name: active
          in: query
        - required: false
          schema:
            type: string
            title: Order
            default: ''
          name: order
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/category-trees/extra-image/{id}':
    put:
      tags:
        - Category Trees
      summary: Update Category Tree Image
      description: >-
        Allow update a category_tree image

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of category_tree  


        <h3> Body</h3>  
         - **image**: b64 to show on app category
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: {"id": id, "url": url}
      operationId: update_category_tree_image_category_trees_extra_image__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_tree_image'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/image-category/{name}':
    get:
      tags:
        - Category Trees
      summary: Read Image File By Id
      description: >-
        Return an image by name (fast api don't allow access files by path)

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **name**: name.extension


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - File response
      operationId: read_image_file_by_id_image_category__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/image-item/{name}':
    get:
      tags:
        - Items
      summary: Read Image File By Id
      description: >-
        Return an image by name

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **name**: name.extension
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - FileResponse
      operationId: read_image_file_by_id_image_item__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/items/{id}':
    get:
      tags:
        - Items
      summary: Read Item By Id
      description: >-
        Return an item by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item
      operationId: read_item_by_id_items__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            format: uuid
            title: Site-Id
          name: site-id
          in: header
        - required: false
          schema:
            type: string
            format: uuid
            title: User-Id
          name: user-id
          in: header
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /items/:
    get:
      tags:
        - Items
      summary: Read Item Filtered
      description: >-
        Return a list of items

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name

        - order: Display order between (price_asc, price_desc, created_last,
        created_first, name_asc, name_desc, max_view, min_view, max_like,
        min_like) 

        - is_in_category: (true, false)

        - is_in_auction: (true, false)

        - category: ids of categories

        - author: id of author

        - owner: id of owner

        - max_price: max price of item

        - min_price: min price of item

        - gallery: id of galery

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_item_filtered_items__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: boolean
            title: Is In Category
          name: is_in_category
          in: query
        - required: false
          schema:
            type: boolean
            title: Is In Auction
          name: is_in_auction
          in: query
        - required: false
          schema:
            type: boolean
            title: Is Ended
          name: is_ended
          in: query
        - required: false
          schema:
            items:
              type: string
            type: array
            title: Category
            default: []
          name: category
          in: query
        - required: false
          schema:
            type: string
            title: Author
          name: author
          in: query
        - required: false
          schema:
            type: string
            title: Owner
          name: owner
          in: query
        - required: false
          schema:
            type: integer
            title: Max Price
          name: max_price
          in: query
        - required: false
          schema:
            type: integer
            title: Min Price
          name: min_price
          in: query
        - required: false
          schema:
            type: string
            title: Gallery
          name: gallery
          in: query
        - required: false
          schema:
            items:
              type: integer
            type: array
            title: Is Active
            default: []
          name: is_active
          in: query
        - required: false
          schema:
            items:
              type: integer
            type: array
            title: Type Item
            default: []
          name: type_item
          in: query
        - required: false
          schema:
            type: boolean
            title: Is Membership
          name: is_membership
          in: query
        - required: false
          schema:
            type: boolean
            title: Is Membership Enabled
          name: is_membership_enabled
          in: query
        - required: false
          schema:
            type: boolean
            title: Is In Order
          name: is_in_order
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Items
      summary: Create Item
      description: >-
        Creates an item

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>

        - **name**: name can't repeat name an user

        - description (str)

        - is_active (bool) if is on bought

        - category_id (str)

        - **price** (number)

        - image (str)

        - attributes List of pair trait_type and value    

        - num_items: number of copies

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id
      operationId: create_item_items__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /top-views/:
    get:
      tags:
        - Items
      summary: Read Top Views
      description: >-
        Return a list of Items ordered by more views

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - limit: max records retrieved (optional default 10)
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_top_views_top_views__get
      parameters:
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /top-favs/:
    get:
      tags:
        - Items
      summary: Read Top Favs
      description: >-
        Return a list of Items ordered by more favourites

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - limit: max records retrieved (optional default 10)
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_top_favs_top_favs__get
      parameters:
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/upload-pdf-items/{id}':
    post:
      tags:
        - Items
      summary: Upload Pdf
      operationId: upload_pdf_upload_pdf_items__id__post
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_pdf_upload_pdf_items__id__post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/item/{id}':
    put:
      tags:
        - Items
      summary: Update Item
      description: >-
        Allow update an item

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of item  


        <h3> Body</h3>  

        - name (str)

        - author_id (str)

        - owner_id (str)

        - collection_id (str)

        - price (number)

        - image_url (str)

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of item
      operationId: update_item_item__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Items
      summary: Delete Item
      description: >-
        Delete an item

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of item
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of item
      operationId: delete_item_item__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/items/collection/{id}':
    get:
      tags:
        - Items
      summary: Get Items Collection
      description: >-
        Get all items on collection

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - param: filter by this param (name, owner, author)

        - q: filter by this word (Ej: name=Natural)

        - order: Display order between ¿Put filters here TODO?(price_asc,
        price_desc, created_last, created_first, name_asc, name_desc, max_view,
        min_view, max_like, min_like)
      operationId: get_items_collection_items_collection__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            title: Param
          name: param
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /items/user/:
    get:
      tags:
        - Items
      summary: Get Items User
      description: >-
        This endpoint retrieves a list of items that user owns, user must be
        loged.


        ### Request

        - HTTP Method: **GET**

        - Path Parameters: **none**

        - Query Parameters:
            - **skip**: The number of records to skip before selecting records (integer, optional, default 0)
            - **limit**: The maximum number of records to return (integer, optional, default 10)
            - **order**: The field to use when sorting the results (string, optional)('name_asc','name_desc','created_last',
            'created_first','price_asc':,'price_desc','max_view','min_view','max_like','min_like')
            - **type_item**: Filter between normal item and evolutive (int, optional) (1(Normal), 2(evolutive))
            - **type_item_**: Filter between normal item,exbition and gift (int, optional) (1(Normal), 2, 3))
            - **membership**: Filter between item is membership, validates whith QR (bool, optional)
        - Request Body: **none**

        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response

        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The permissions list, if the request was successful
      operationId: get_items_user_items_user__get
      parameters:
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: integer
            title: Type Item
          name: type_item
          in: query
        - required: false
          schema:
            type: boolean
            title: Membership
          name: membership
          in: query
        - required: false
          schema:
            type: boolean
            title: Membership Enabled
          name: membership_enabled
          in: query
        - required: false
          schema:
            type: integer
            title: Is Active
          name: is_active
          in: query
        - required: false
          schema:
            type: integer
            title: 'Type Item '
          name: type_item_
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Author
          name: author
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /items/author/:
    get:
      tags:
        - Items
      summary: Get Items Author
      description: >-
        Return a list of items that user created, user must be loged

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        - status: for_sale, sold

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item list
      operationId: get_items_author_items_author__get
      parameters:
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: boolean
            title: Grouped
          name: grouped
          in: query
        - required: false
          schema:
            type: integer
            title: Is Active
          name: is_active
          in: query
        - required: false
          schema:
            type: string
            format: uuid
            title: Author
          name: author
          in: query
        - required: false
          schema:
            type: string
            title: Status
          name: status
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/items/validate/{id}':
    get:
      tags:
        - Items
      summary: Item Validate
      description: >-
        Change state from item

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>
          
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item id
      operationId: item_validate_items_validate__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /items/print:
    post:
      tags:
        - Items
      summary: Print Item
      description: >-
        Return an item by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item
      operationId: print_item_items_print_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPrint'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/items/custody/{id}':
    get:
      tags:
        - Items
      summary: Read Item By Id
      description: >-
        Return an item by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item
      operationId: read_item_by_id_items_custody__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            format: uuid
            title: Site-Id
          name: site-id
          in: header
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/items/external/{id}':
    get:
      tags:
        - Items
      summary: Read Item By Id
      description: >-
        Return an item by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: item
      operationId: read_item_by_id_items_external__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/files/whitepapers/{id}':
    get:
      tags:
        - Items
      summary: Read Image File By Name
      description: Return an file by its UUID
      operationId: read_image_file_by_name_files_whitepapers__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Items
      summary: Delete Whitepaper
      description: Delete an file by its UUID
      operationId: delete_whitepaper_files_whitepapers__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /assets/:
    get:
      tags:
        - Assets
      summary: Read Assets
      description: >-
        Return asset list for an amount

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path </h3>

        - amount : amount fiat

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: list of assets
      operationId: read_assets_assets__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /assets/1:
    get:
      tags:
        - Assets
      summary: Read Assets
      description: >-
        Return asset list for an amount

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path </h3>

        - amount : amount fiat

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: list of assets
      operationId: read_assets_assets_1_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  '/assets/{asset_symbol}':
    get:
      tags:
        - Assets
      summary: Read Asset By Asset Symbol
      description: |-
        This endpoint retrieves an asset by its symbol

        ### Request
        - HTTP Method: **GET**
        - Path Parameters:
            - **asset_symbol**: Symbol corresponding to an asset (str)
        - Query Parameters: **none**
        - Request Body: **none**
        - Headers: 
            - **Authorization**: JWT token for authentication
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The applications list, if the request was successful
      operationId: read_asset_by_asset_symbol_assets__asset_symbol__get
      parameters:
        - required: true
          schema:
            type: string
            title: Asset Symbol
          name: asset_symbol
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /identity:
    post:
      tags:
        - Identity
      summary: Identify Asset
      description: |-
        Identify a asset
        - asset_uuid: code asset
      operationId: identify_asset_identity_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Identity'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/identity/{token}':
    get:
      tags:
        - Identity
      summary: Confirm Identify Asset
      description: |-
        Confirm membership if an asset
        - token: code to verify
      operationId: confirm_identify_asset_identity__token__get
      parameters:
        - required: true
          schema:
            type: string
            title: Token
          name: token
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/orders/{id}':
    get:
      tags:
        - Orders
      summary: Read Order By Id
      description: >-
        Return an order by id

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**(uuid): id of order
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: order
      operationId: read_order_by_id_orders__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Orders
      summary: Delete Order
      description: >-
        Delete an order

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of order
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of order
      operationId: delete_order_orders__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /orders/:
    get:
      tags:
        - Orders
      summary: Read Order Filtered
      description: >-
        Return a list of orders

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - order: created_last, created_first

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: orders list
      operationId: read_order_filtered_orders__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    post:
      tags:
        - Orders
      summary: Create Order
      description: >-
        Creates an order

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>

        - **item_id**

        - quantity: number of copies

        - pay_method_selected: how pays paypal...

        - data: some extra data

        - price

        - user_id

        - seller_id

        - price

        - currency

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id
      operationId: create_order_orders__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/orders-status/{id}/':
    put:
      tags:
        - Orders
      summary: Update Order
      description: >-
        Allow update an order

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**: id of order  


        <h3> Body</h3>  

        -  **status**: state of order (CREATED, COMPLETED)

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: json with id of order
      operationId: update_order_orders_status__id___put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateStatus'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /orders/historic/sell/:
    get:
      tags:
        - Orders
      summary: Read Historic Sell
      description: >-
        Return a list items of selled by user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_historic_sell_orders_historic_sell__get
      parameters:
        - required: false
          schema:
            type: string
            title: Status
            default: COMPLETED
          name: status
          in: query
        - required: false
          schema:
            type: string
            title: Sort By
            default: created_date
          name: sort_by
          in: query
        - required: false
          schema:
            type: string
            title: Sort Criteria
            default: DESC
          name: sort_criteria
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /orders/historic/buy/:
    get:
      tags:
        - Orders
      summary: Read Historic Buy
      description: >-
        Return a list items of bougth by user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_historic_buy_orders_historic_buy__get
      parameters:
        - required: false
          schema:
            type: string
            title: Status
            default: COMPLETED
          name: status
          in: query
        - required: false
          schema:
            type: string
            title: Sort By
            default: created_date
          name: sort_by
          in: query
        - required: false
          schema:
            type: string
            title: Sort Criteria
            default: DESC
          name: sort_criteria
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/items/historic/{id}':
    get:
      tags:
        - Orders
      summary: Read Historic Item
      description: >-
        Return a list of movements of item

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>

        - **id**

        <h3> Query</h3>

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)


        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         Standard response object
        - success: True/False

        - message: String describing error

        - result: items list
      operationId: read_historic_item_items_historic__id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
        - required: false
          schema:
            type: string
            title: Status
            default: COMPLETED
          name: status
          in: query
        - required: false
          schema:
            type: string
            title: Sort By
            default: asc
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /Sell/Paypal/create:
    post:
      tags:
        - Purchassing
      summary: Create Order Paypal
      description: |-
        Create an order on bbdd and on paypal

        ---------------------------------------------
        <h2>Parameters:</h2>
        <h3> Body</h3>
        - item_id(str): Id of product to be bought
        - quantity(int): Optional = 1
        - pay_method_selected(str): Optional = paypal
        - data(str): Optional
        - user(str): Optional 
        - seller_id(str): Optional
        - status: Optional[int] = 2 (created)
        - price: float(Optional)
        - currency(str): Optional[str]
           
        ---------------------------------------------------
        <h2>Returns</h2>
         - Status Code (str): Inherit from v1 Eg: CREATED
         - Order ID (str): Id of order on paypal
         - Intent: configuration of paypal (Capture to make payment now)
         - Links 
            - self (str)
            - approve (str) -> Allow to make a payment login on paypal
            - update (str)
            - capture (str)
         - Total Amount (str) -> Coin Value Eg: "EUR 0.10"
      operationId: create_order_paypal_Sell_Paypal_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /Sell/Paypal/capture:
    post:
      tags:
        - Purchassing
      summary: Capture Order Paypal
      description: >-
        Capture an order on paypal. This endpont should be invoke after user
        authorize payment.

        - Update order on paypal and our bbdd

        - Change owner of item an set is_active to False

        ---------------------------------------------

        <h2>Parameters:</h2>

        <h3> Body</h3>

        - order_id(str): Id of order on paypal 
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>
         - Status Code (str): Inherit from v1 Eg: COMPLETED
         - Order ID (str): Id of order on paypal
         - Links 
            - self (str)
            Eg:
            {
                "success": true,
                "message": "",
                "result": {
                    "Status Code": "COMPLETED",
                    "Order ID": "7FL99101XK847691W",
                    "Links": {
                    "self": "https://api.sandbox.paypal.com/v2/checkout/orders/7FL99101XK847691W"
                    }
                }
                }
      operationId: capture_order_paypal_Sell_Paypal_capture_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCapture'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /Sell/Redsys/create:
    post:
      tags:
        - Purchassing
      summary: Create Order Redsys
      description: |-
        Create an order on bbdd and on paypal

        ---------------------------------------------
        <h2>Parameters:</h2>
        <h3> Body</h3>
        - item_id(str): Id of product to be bought
        - quantity(int): Optional = 1
        - pay_method_selected(str): Optional = redsys
        - data(str): Optional
        - user(str): Optional 
        - seller_id(str): Optional
        - status: Optional[int] = 2 (created)
        - price: float(Optional)
        - currency(str): Optional[str]
           
        ---------------------------------------------------
        <h2>Returns</h2>
         - Status Code (str): Inherit from v1 Eg: PENDING
         - Order ID (str): Id of order on Redsys
         - Paramas: Data for the payment form
      operationId: create_order_redsys_Sell_Redsys_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /redsys-notification/:
    post:
      tags:
        - Orders
      summary: Redsys Notification
      description: >-
        Creates an order

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3>Post</h3>

        - Ds_SignatureVersion:

        - Ds_MerchantParametersdb: number of copies

        - Ds_Signature:

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - None
      operationId: redsys_notification_redsys_notification__post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/Body_redsys_notification_redsys_notification__post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /Sell/Nummun/create:
    post:
      tags:
        - Purchassing
      summary: Create Order Nummun
      description: |-
        This endpoint create an order on bbdd and preorder on nummun.

        ### Request
        - HTTP Method: **POST**
        - Path Parameters: **none**
        - Query Parameters: **none**
        - Request Body:
            - **price**: (float, optional)
        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The properties object, if the request was successful
      operationId: create_order_nummun_Sell_Nummun_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/nummun-notification/{id}':
    post:
      tags:
        - Orders
      summary: Nummun Notification
      description: |-
        This endpoint create an order from its ID.

        ### Request
        - HTTP Method: **POST**
        - Path Parameters: **none**
        - Query Parameters: **none**
        - Request Body: 
            - **customer_order_id**
            - **amount**
            - **status**
        - Headers: **none**
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The properties object, if the request was successfull
      operationId: nummun_notification_nummun_notification__id__post
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NummunNotification'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /Sell/gift:
    post:
      tags:
        - Purchassing
      summary: Create Order Gift
      description: |-
        Create an order on bbdd and on paypal

        ---------------------------------------------
        <h2>Parameters:</h2>
        <h3> Body</h3>
        - item_id(str): Id of product to be bought
        - quantity(int): Optional = 1
        - data(str): Optional
        - user(str): Optional 
        - seller_id(str): Optional
           
        ---------------------------------------------------
        <h2>Returns</h2>
      operationId: create_order_gift_Sell_gift_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /Sell/drop:
    post:
      tags:
        - Purchassing
      summary: Create Order Drop
      description: |-
        Create an order on bbdd and on paypal

        ---------------------------------------------
        <h2>Parameters:</h2>
        <h3> Body</h3>
        - item_id(str): Id of product to be bought
        - quantity(int): Optional = 1
        - data(str): Optional
        - user(str): Optional 
        - seller_id(str): Optional

        ---------------------------------------------------
        <h2>Returns</h2>
      operationId: create_order_drop_Sell_drop_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDrop'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /connection-deactivate/:
    post:
      tags:
        - Connections
      summary: Activate Connection
      description: >-
        This endpoint allow to unauthorize a device  


        -------------------------------------------------------------------------------  

        <h2>Parameters:</h2>

        <h3> Body</h3>

        - device  
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - success

        - result if unauthorize the connection

        - message in case of error
      operationId: activate_connection_connection_deactivate__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /connection-Device-Table/:
    get:
      tags:
        - Connections
      summary: Device Table
      description: >-
        This endpoint return the users list device connection data
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - success

        - result listing devices
      operationId: device_table_connection_Device_Table__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /connection-Last-Access/:
    get:
      tags:
        - Connections
      summary: Device Table
      description: >-
        This endpoint return the user last access
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        - success

        - result last access(recent_activity(date), place, ip, activity)
      operationId: device_table_connection_Last_Access__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  '/category-trees/fav/check/{category_id}':
    get:
      tags:
        - Favourites
      summary: Read Category Favourite
      description: >-
        Return if category is favourite or not, user must be loged

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Path</h3>  
         - **category_id** : id of category
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: True/False
      operationId: read_category_favourite_category_trees_fav_check__category_id__get
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Category Id
          name: category_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /category-trees/fav/mark/:
    post:
      tags:
        - Favourites
      summary: Mark Category Favourite
      description: >-
        Allow mark a category as favourite  user must be loged

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>  
         - **category_id** : id of category
         - **user_id** : id of user
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id of category and user
      operationId: mark_category_favourite_category_trees_fav_mark__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_Favourite'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/category-trees/fav/unmark/{category_id}':
    delete:
      tags:
        - Favourites
      summary: Unmark Category Favourite
      description: >-
        Allow unmark a category as favourite  

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>  
         - **category_id** : id of category
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: json with id of category and user
      operationId: unmark_category_favourite_category_trees_fav_unmark__category_id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Category Id
          name: category_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /category-trees/fav/:
    get:
      tags:
        - Favourites
      summary: Read Category Favourite By User
      description: >-
        Return categories favourites from user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Header</h3>  
         - Authorization: Bearer token

        <h3> Query</h3>  

         - order: created_last or default
         - skip: number of records you skip before selecting records.(optional default 0)  
         - limit: max records retrieved (optional default 10)
         - paged: if show total record an links to paginate request
           
        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: List of categories
      operationId: read_category_favourite_by_user_category_trees_fav__get
      parameters:
        - required: false
          schema:
            type: string
            title: Order
          name: order
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/exchange/{id}':
    get:
      tags:
        - Brokerage
      summary: Return Order Brokerage By Id
      description: |-
        This endpoint retrieves an exchange operation by its ID.

        ### Request
        - HTTP Method: **GET**
        - Path Parameters:
            - **id**: The ID of the exchange operation to retrieve (UUID, required)
        - Query Parameters: **none**
        - Request Body: **none**
        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The exchange operation object, if the request was successful
      operationId: return_order_brokerage_by_id_exchange__id__get
      parameters:
        - required: true
          schema:
            type: string
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /exchange:
    get:
      tags:
        - Brokerage
      summary: Return Orders Brokerage
      description: >-
        Return exchange operations list for an user

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Query </h3>

        - order : created_date last one first

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: list of exchange operations
      operationId: return_orders_brokerage_exchange_get
      parameters:
        - required: false
          schema:
            type: string
            title: Sorting Field
            default: created_date
          name: sorting_field
          in: query
        - required: false
          schema:
            type: string
            title: Sorting Criteria
            default: DESC
          name: sorting_criteria
          in: query
        - required: false
          schema:
            type: string
            title: User Id
          name: user_id
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 100
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    post:
      tags:
        - Brokerage
      summary: Create Order Brokerage
      description: >-
        Buy an asset using other asset

          -------------------------------------------------------------------------------  
        <h2>Parameters:</h2>

        <h3> Body</h3>

        - **asset_destiny**: asset what we want to buy

        - **asset_source**: asset what we use to pay

        - **amount**: amount of asset_source we pay

        ---------------------------------------------------------------------------------

        <h2>Returns</h2>

        Standard response object

        - success: True/False

        - message: String describing error

        - result: list of exchange
      operationId: create_order_brokerage_exchange_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brokerage'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/exchange/default-conversor/{asset_destiny}':
    get:
      tags:
        - Brokerage
      summary: Check Exchange Default Conversor
      description: >-
        This endpoint return assets and its balances to be able of show them in
        create order



        ### Request

        - HTTP Method: **GET**

        - Path Parameters:
            - **asset_destiny**: asset what we want to buy 
        - Query Parameters: 
            - **excluded**: asset list what we don't include (Optional) Empty by default
            - **types_asset**: asset type list what we want to include (Optional) 0 (FIAT) and 1 (ETH, BTC) by default
        - Request Body: **none**

        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response

        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The asset list, if the request was successful
      operationId: >-
        check_exchange_default_conversor_exchange_default_conversor__asset_destiny__get
      parameters:
        - required: true
          schema:
            type: string
            title: Asset Destiny
          name: asset_destiny
          in: path
        - required: false
          schema:
            items:
              type: integer
            type: array
            title: Types Asset
            default:
              - 0
              - 1
          name: types_asset
          in: query
        - required: false
          schema:
            items:
              type: string
            type: array
            title: Excluded
            default: []
          name: excluded
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/exchange/conversor/{asset_destiny}/{amount}':
    get:
      tags:
        - Brokerage
      summary: Check Exchange Conversor
      description: >-
        This endpoint get result of conversion from an amount on an asset to its
        equivalent in other assets to be able of use it in create order



        ### Request

        - HTTP Method: **GET**

        - Path Parameters:
            - **asset_destiny**: asset what we want to buy
            - **amount**: amount of asset what we want to buy 
        - Query Parameters: 
            - **excluded**: asset list what we don't include (Optional) Empty by default
            - **types_asset**: asset type list what we want to include (Optional) 0 (FIAT) and 1 (ETH, BTC) by default
        - Request Body: **none**

        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response

        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The asset list with conversion, if the request was successful
      operationId: check_exchange_conversor_exchange_conversor__asset_destiny___amount__get
      parameters:
        - required: true
          schema:
            type: string
            title: Asset Destiny
          name: asset_destiny
          in: path
        - required: true
          schema:
            type: number
            title: Amount
          name: amount
          in: path
        - required: false
          schema:
            items:
              type: integer
            type: array
            title: Types Asset
            default:
              - 0
              - 1
          name: types_asset
          in: query
        - required: false
          schema:
            items:
              type: string
            type: array
            title: Excluded
            default: []
          name: excluded
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /exchange/min-amount/:
    get:
      tags:
        - Brokerage
      summary: Check Min Amount
      description: |-
        This endpoint return min amount of asset to use them in create order


        ### Request
        - HTTP Method: **GET**
        - Path Parameters: **none**
        - Query Parameters: **none**
        - Request Body: **none**
        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The asset list amount, if the request was successful
      operationId: check_min_amount_exchange_min_amount__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  '/exchange/min-amount/{asset_symbol}':
    get:
      tags:
        - Brokerage
      summary: Check Min Amount Asset
      description: |-
        This endpoint return min amount of asset to use them in create order

        ### Request
        - HTTP Method: **GET**
        - Path Parameters:
            - **asset_symbol**: asset symbol
        - Query Parameters: **none**
        - Request Body: **none**
        - Headers:
            - **Authorization**: JWT token for authentication
        ### Response
        - Response Body **JSON**:
            - **success**: A boolean indicating whether the request was successful
            - **message**: An optional message describing the result of the request (e.g., an error message)
            - **result**: The asset min amount, if the request was successful
      operationId: check_min_amount_asset_exchange_min_amount__asset_symbol__get
      parameters:
        - required: true
          schema:
            type: string
            title: Asset Symbol
          name: asset_symbol
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /support/:
    post:
      tags:
        - Support
      summary: Create Issue
      description: >-
        Creates a new issue in GitLabof type (login required)
           
         ---------------------------------------------------------------------------------------------------------------------------------------------------------
         <h2>Parameters:</h2>
         <h3>Body:</h3>

         
         - email: str
         - subject: str
         - message: str
         - company: Optional[str]
         - attached: Optional[str] few archives
         - tokenCaptcha: str          

        ---------------------------------------------------------------------------------------------------------------
         <h2>Returns</h2>  
         Standard response object  
         - success: True/False  
         - message: String describing error/success
      operationId: create_issue_support__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Support'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /public/uploadkyc/:
    post:
      tags:
        - Support
      summary: Send Kyc
      description: >-
        Create a new issue in GitLabof type (login required)
           
         ---------------------------------------------------------------------------------------------------------------------------------------------------------
         <h2>Parameters:</h2>
         <h3>Body:</h3>

         
         - email: str
         - subject: str
         - message: str
         - company: Optional[str]
         - attached: Optional[str] few archives
         - tokenCaptcha: str          

        ---------------------------------------------------------------------------------------------------------------
         <h2>Returns</h2>  
         Standard response object  
         - success: True/False  
         - message: String describing error/success
      operationId: send_kyc_public_uploadkyc__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kyc'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /public/kyc/:
    post:
      tags:
        - Support
      summary: Send Kyc
      description: >-
        Create a new issue in GitLabof type (login required)
           
         ---------------------------------------------------------------------------------------------------------------------------------------------------------
         <h2>Parameters:</h2>
         <h3>Body:</h3>

         
         - email: str
         - subject: str
         - message: str
         - company: Optional[str]
         - attached: Optional[str] few archives
         - tokenCaptcha: str          

        ---------------------------------------------------------------------------------------------------------------
         <h2>Returns</h2>  
         Standard response object  
         - success: True/False  
         - message: String describing error/success
      operationId: send_kyc_public_kyc__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycCompany'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/savekyc/:
    post:
      tags:
        - Support
      summary: Post Save Kyc
      description: Save kycStatus
      operationId: post_save_kyc_users_savekyc__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycSave'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/savekycpro/:
    post:
      tags:
        - Support
      summary: Post Save Kyc
      description: Save kycStatus
      operationId: post_save_kyc_users_savekycpro__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycSaveCompany'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/getkyc/:
    get:
      tags:
        - Support
      summary: Get Kyc
      description: Return kycStatus
      operationId: get_kyc_users_getkyc__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /users/kyc-status/:
    get:
      tags:
        - Support
      summary: Get Kyc Status
      description: Return kycStatus
      operationId: get_kyc_status_users_kyc_status__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  '/files/gallery_images/{name}':
    get:
      tags:
        - Galleries
      summary: Read Image File By Name
      description: |-
        Return an image by name
        - name: name.extension
      operationId: read_image_file_by_name_files_gallery_images__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/files/gallery_images/logo/{name}':
    get:
      tags:
        - Galleries
      summary: Read Image File By Name
      description: |-
        Return an image by name
        - name: name.extension
      operationId: read_image_file_by_name_files_gallery_images_logo__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/files/gallery_images/avatar/{name}':
    get:
      tags:
        - Galleries
      summary: Read Image File By Name
      description: |-
        Return an image by name
        - name: name.extension
      operationId: read_image_file_by_name_files_gallery_images_avatar__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/files/gallery_images/front/{name}':
    get:
      tags:
        - Galleries
      summary: Read Image File By Name
      description: |-
        Return an image by name
        - name: name.extension
      operationId: read_image_file_by_name_files_gallery_images_front__name__get
      parameters:
        - required: true
          schema:
            type: string
            title: Name
          name: name
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /galleries/:
    get:
      tags:
        - Galleries
      summary: Read Galleries Public Data
      description: >-
        Return all galleries without be loged

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - user_type: user_type 1 regular, 3 gallerist

        - q: filter by name

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_galleries_public_data_galleries__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /gallery/user/:
    get:
      tags:
        - Galleries
      summary: Read Gallery Public Data
      description: |-
        Return a gallery by an user id

        ---------------------------------------------------------------
        <h2>Returns</h2>
        Standard response object
        - success: True/False
        - message: String describing error
        - result: gallery
      operationId: read_gallery_public_data_gallery_user__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - OAuth2PasswordBearer: []
  /gallery:
    put:
      tags:
        - Galleries
      summary: Update Gallery
      description: >-
        Gallerist create a gallery

        - url: temporaly used

        - name: str

        - color_1: str on hexadecimal

        - color_2: Optional[str] on hexadecimal

        - footer_type: Optional[str] (prepared for future election of footer
        design)

        - type: public, private if people can see gallery

        - category: photo, video..

        - logo_1: Optional[str] Logo for header

        - logo_2: Optional[str] Inverse colors logo

        - avatar: Optional[str]

        - front_image: Optional[str]

        - category: (PHOTO...)
      operationId: update_gallery_gallery_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGallery'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    post:
      tags:
        - Galleries
      summary: Create Gallery
      description: >-
        Gallerist create a gallery

        - url: temporaly used

        - name: str

        - color_1: str on hexadecimal

        - color_2: Optional[str] on hexadecimal

        - footer_type: Optional[str] (prepared for future election of footer
        design)

        - logo_1: Optional[str] Logo for header

        - logo_2: Optional[str] Inverse colors logo

        - avatar: Optional[str]

        - front_image: Optional[str]
      operationId: create_gallery_gallery_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gallery'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /gallery-base:
    post:
      tags:
        - Galleries
      summary: Read Gallery Public Data
      description: |-
        Return all galleries without be loged
        - domain: url from web
      operationId: read_gallery_public_data_gallery_base_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /gallery-resources/:
    put:
      tags:
        - Galleries
      summary: Update Image
      description: |-
        Allow update images from gallery
            - logo_1: Optional[str]
            - logo_2: Optional[str]
            - avatar: Optional[str]
            - front_image: Optional[str]
      operationId: update_image_gallery_resources__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gallery_Resources'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/set-domain/{id}':
    post:
      tags:
        - Galleries
      summary: Set Domain
      description: |-
        Temporal url to set adress of gallety
        - domain: temporaly used
      operationId: set_domain_set_domain__id__post
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /social-networks/:
    get:
      tags:
        - Social Network
      summary: Read Social Networks Public Data
      description: >-
        Return all social-networks without be loged

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - user_type: user_type 1 regular, 3 gallerist

        - q: filter by name

        - sort_by: sort list from more items created to less or the opposite 
        (optional default desc)
           - asc: less to more
           - desc: more to less (default)
           - name_asc: name from a to z
           - name_desc: name from z to a
           - max_like: order by more favourites
           - min_like: order by less favourites 
        ---------------------------------------------------------------

        if paged:

        - total: total items created
      operationId: read_social_networks_public_data_social_networks__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            title: Sort By
            default: ''
          name: sort_by
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Social Network
      summary: Create Social Network
      description: |-
        Creates an social-network
        - name
        - icon (Optional)
      operationId: create_social_network_social_networks__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Social_Networks'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/social-networks/{id}':
    put:
      tags:
        - Social Network
      summary: Update Social Network
      description: |-
        Allow update a social-network  
        - id: social-network id 

        - name
        - icon (Optional)
      operationId: update_social_network_social_networks__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Social_Networks'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Social Network
      summary: Delete Social Network
      description: |-
        Delete an social-network
        - id: id of social-network
      operationId: delete_social_network_social_networks__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /categories-gallery/:
    get:
      tags:
        - Categories gallery
      summary: Read Categories Gallery Filtered
      description: >-
        Return all categories

        - skip: number of records you skip before selecting records.(optional
        default 0)  

        - limit: max records retrieved (optional default 10)

        - paged: if show total record an links to paginate request

        - q: filter by name
      operationId: read_categories_gallery_filtered_categories_gallery__get
      parameters:
        - required: false
          schema:
            type: string
            title: Q
          name: q
          in: query
        - required: false
          schema:
            type: integer
            title: Skip
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            type: integer
            title: Limit
            default: 10
          name: limit
          in: query
        - required: false
          schema:
            type: boolean
            title: Paged
            default: true
          name: paged
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Categories gallery
      summary: Create Category
      description: |-
        Creates an category
        - title
        - text
        - advice_type_id id from advice type (Optional)
      operationId: create_category_categories_gallery__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories_Gallery'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  '/categories-gallery/{id}':
    put:
      tags:
        - Categories gallery
      summary: Update Category
      description: |-
        Allow update a category  
        - id: category id 

        - name
        - description: (Optional)
      operationId: update_category_categories_gallery__id__put
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories_Gallery'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
    delete:
      tags:
        - Categories gallery
      summary: Delete Category
      description: |-
        Delete an advice
        - id: id of category
      operationId: delete_category_categories_gallery__id__delete
      parameters:
        - required: true
          schema:
            type: string
            format: uuid
            title: Id
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /healthcheck/:
    get:
      tags:
        - Monitor
      summary: Healthcheck
      description: Returns healthcheck status
      operationId: healthcheck_healthcheck__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  schemas:
    Advice:
      properties:
        title:
          type: string
          title: Title
        text:
          type: string
          title: Text
        advice_type_id:
          type: string
          format: uuid
          title: Advice Type Id
      type: object
      required:
        - title
        - text
      title: Advice
    AdviceUpdate:
      properties:
        title:
          type: string
          title: Title
        text:
          type: string
          title: Text
        advice_type_id:
          type: string
          format: uuid
          title: Advice Type Id
      type: object
      required:
        - title
        - text
      title: AdviceUpdate
    Advice_type:
      properties:
        name:
          type: string
          title: Name
      type: object
      required:
        - name
      title: Advice_type
    Attribute:
      properties:
        trait_type:
          type: string
          title: Trait Type
        value:
          type: string
          title: Value
      type: object
      required:
        - trait_type
        - value
      title: Attribute
    Body_login_for_access_token_token_post:
      properties:
        grant_type:
          type: string
          pattern: password
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          type: string
          title: Client Id
        client_secret:
          type: string
          title: Client Secret
      type: object
      required:
        - username
        - password
      title: Body_login_for_access_token_token_post
    Body_redsys_notification_redsys_notification__post:
      properties:
        Ds_SignatureVersion:
          type: string
          title: Ds Signatureversion
          default: Ds_SignatureVersion
        Ds_MerchantParameters:
          type: string
          title: Ds Merchantparameters
          default: Ds_MerchantParameters
        Ds_Signature:
          type: string
          title: Ds Signature
          default: Ds_Signature
      type: object
      title: Body_redsys_notification_redsys_notification__post
    Body_upload_pdf_upload_pdf_items__id__post:
      properties:
        pdf_file:
          type: string
          format: binary
          title: Pdf File
      type: object
      required:
        - pdf_file
      title: Body_upload_pdf_upload_pdf_items__id__post
    Brokerage:
      properties:
        amount:
          type: number
          title: Amount
        asset_source:
          type: string
          title: Asset Source
        asset_destiny:
          type: string
          title: Asset Destiny
      type: object
      required:
        - amount
        - asset_source
        - asset_destiny
      title: Brokerage
      example:
        amount: 0.0001
        asset_source: ETH
        asset_destiny: BTC
    Categories_Gallery:
      properties:
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
      type: object
      required:
        - name
      title: Categories_Gallery
    Category_Favourite:
      properties:
        category_id:
          type: string
          format: uuid
          title: Category Id
        user_id:
          type: string
          format: uuid
          title: User Id
      type: object
      required:
        - category_id
        - user_id
      title: Category_Favourite
    Category_tree:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        active:
          type: boolean
          title: Active
        user_id:
          type: string
          title: User Id
        gallery_id:
          type: string
          title: Gallery Id
        is_root:
          type: boolean
          title: Is Root
        image:
          type: string
          title: Image
        image_2:
          type: string
          title: Image 2
      type: object
      required:
        - name
        - description
      title: Category_tree
    Category_tree_image:
      properties:
        image:
          type: string
          title: Image
        image_2:
          type: string
          title: Image 2
      type: object
      title: Category_tree_image
    ChangePass:
      properties:
        pass_:
          type: string
          title: 'Pass '
        oldPass:
          type: string
          title: Oldpass
        gallery_uuid:
          type: string
          format: uuid
          title: Gallery Uuid
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        OTPCode:
          type: string
          title: Otpcode
      type: object
      required:
        - pass_
        - oldPass
        - tokenCaptcha
      title: ChangePass
    Device:
      properties:
        device:
          type: string
          title: Device
      type: object
      required:
        - device
      title: Device
    Domain:
      properties:
        domain:
          type: string
          title: Domain
      type: object
      required:
        - domain
      title: Domain
    External:
      properties:
        code:
          type: string
          title: Code
        mahou_user_info:
          type: string
          title: Mahou User Info
        mail:
          type: string
          title: Mail
        user_uuid:
          type: string
          format: uuid
          title: User Uuid
        gallery_id:
          type: string
          format: uuid
          title: Gallery Id
      type: object
      required:
        - mahou_user_info
        - mail
        - user_uuid
      title: External
    Gallery:
      properties:
        admin:
          type: string
          format: uuid
          title: Admin
        name:
          type: string
          title: Name
        url:
          type: string
          title: Url
        color_1:
          type: string
          title: Color 1
        color_2:
          type: string
          title: Color 2
        footer_type:
          type: string
          title: Footer Type
        logo_1:
          type: string
          title: Logo 1
        logo_2:
          type: string
          title: Logo 2
        avatar:
          type: string
          title: Avatar
        front_image:
          type: string
          title: Front Image
        category:
          type: string
          title: Category
        category_id:
          type: string
          format: uuid
          title: Category Id
        type:
          type: string
          title: Type
        type_alias:
          type: string
          title: Type Alias
      type: object
      required:
        - name
        - color_1
      title: Gallery
    Gallery_Resources:
      properties:
        logo_1:
          type: string
          title: Logo 1
        logo_2:
          type: string
          title: Logo 2
        avatar:
          type: string
          title: Avatar
        front_image:
          type: string
          title: Front Image
      type: object
      title: Gallery_Resources
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Identity:
      properties:
        user_uuid:
          type: string
          format: uuid
          title: User Uuid
        asset_uuid:
          type: string
          format: uuid
          title: Asset Uuid
        external:
          type: boolean
          title: External
      type: object
      title: Identity
    Item:
      properties:
        name:
          type: string
          title: Name
        author:
          type: string
          format: uuid
          title: Author
        description:
          type: string
          title: Description
        is_active:
          type: integer
          title: Is Active
        type_item:
          type: integer
          title: Type Item
        price:
          type: number
          title: Price
        image:
          type: string
          title: Image
        category_id:
          type: string
          format: uuid
          title: Category Id
        attributes:
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
          title: Attributes
        num_items:
          type: integer
          title: Num Items
        is_membership:
          type: boolean
          title: Is Membership
        is_membership_enabled:
          type: boolean
          title: Is Membership Enabled
      type: object
      required:
        - name
      title: Item
    ItemPrint:
      properties:
        item_uuid:
          type: string
          format: uuid
          title: Item Uuid
        language:
          type: string
          title: Language
      type: object
      required:
        - item_uuid
        - language
      title: ItemPrint
    ItemUpdate:
      properties:
        name:
          type: string
          title: Name
        author:
          type: string
          format: uuid
          title: Author
        description:
          type: string
          title: Description
        is_active:
          type: integer
          title: Is Active
        type_item:
          type: integer
          title: Type Item
        price:
          type: number
          title: Price
        image:
          type: string
          title: Image
        category_id:
          type: string
          format: uuid
          title: Category Id
        attributes:
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
          title: Attributes
        num_items:
          type: integer
          title: Num Items
        is_membership:
          type: boolean
          title: Is Membership
        is_membership_enabled:
          type: boolean
          title: Is Membership Enabled
        author_id:
          type: string
          format: uuid
          title: Author Id
        owner_id:
          type: string
          format: uuid
          title: Owner Id
        collection_id:
          type: string
          format: uuid
          title: Collection Id
        image_url:
          type: string
          title: Image Url
      type: object
      title: ItemUpdate
    Kyc:
      properties:
        email:
          type: string
          title: Email
        subject:
          type: string
          title: Subject
        message:
          type: string
          title: Message
        attached:
          items: {}
          type: array
          title: Attached
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        userData:
          $ref: '#/components/schemas/UserData'
      type: object
      required:
        - email
        - subject
        - message
        - tokenCaptcha
        - userData
      title: Kyc
    KycCompany:
      properties:
        email:
          type: string
          title: Email
        subject:
          type: string
          title: Subject
        message:
          type: string
          title: Message
        attached:
          items: {}
          type: array
          title: Attached
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        userData:
          $ref: '#/components/schemas/UserDataCompany'
      type: object
      required:
        - email
        - subject
        - message
        - tokenCaptcha
        - userData
      title: KycCompany
    KycSave:
      properties:
        attached:
          items: {}
          type: array
          title: Attached
        userData:
          $ref: '#/components/schemas/UserData'
      type: object
      required:
        - attached
        - userData
      title: KycSave
    KycSaveCompany:
      properties:
        attached:
          items: {}
          type: array
          title: Attached
        userData:
          $ref: '#/components/schemas/UserDataCompany'
      type: object
      required:
        - attached
        - userData
      title: KycSaveCompany
    NummunNotification:
      properties:
        customer_order_id:
          type: string
          title: Customer Order Id
        amount:
          type: number
          title: Amount
        status:
          type: string
          title: Status
      type: object
      required:
        - customer_order_id
        - amount
        - status
      title: NummunNotification
    OTPCode:
      properties:
        OTPCode:
          type: string
          title: Otpcode
      type: object
      required:
        - OTPCode
      title: OTPCode
    Order:
      properties:
        item_id:
          type: string
          format: uuid
          title: Item Id
        quantity:
          type: integer
          title: Quantity
        pay_method_selected:
          type: string
          title: Pay Method Selected
        data:
          type: string
          title: Data
        user_id:
          type: string
          format: uuid
          title: User Id
        seller_id:
          type: string
          format: uuid
          title: Seller Id
        status:
          type: string
          title: Status
        price:
          type: number
          title: Price
        currency:
          type: string
          title: Currency
      type: object
      required:
        - item_id
      title: Order
      example:
        item_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        quantity: 1
    OrderCapture:
      properties:
        order_id:
          type: string
          title: Order Id
      type: object
      required:
        - order_id
      title: OrderCapture
      example:
        order_id: 6Y8877859U206305J
    OrderDrop:
      properties:
        item_id:
          type: string
          format: uuid
          title: Item Id
        quantity:
          type: integer
          title: Quantity
        pay_method_selected:
          type: string
          title: Pay Method Selected
        data:
          type: string
          title: Data
        user_id:
          items:
            type: string
            format: uuid
          type: array
          title: User Id
        seller_id:
          type: string
          format: uuid
          title: Seller Id
        price:
          type: number
          title: Price
        currency:
          type: string
          title: Currency
      type: object
      required:
        - item_id
      title: OrderDrop
      example:
        item_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        quantity: 1
    OrderUpdateStatus:
      properties:
        status:
          type: string
          title: Status
      type: object
      required:
        - status
      title: OrderUpdateStatus
    Product_Favourite:
      properties:
        item_id:
          type: string
          format: uuid
          title: Item Id
        user_id:
          type: string
          format: uuid
          title: User Id
      type: object
      required:
        - item_id
        - user_id
      title: Product_Favourite
    RecoverPass:
      properties:
        email:
          type: string
          title: Email
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        language:
          type: string
          title: Language
        domain:
          type: string
          title: Domain
      type: object
      required:
        - email
        - tokenCaptcha
      title: RecoverPass
    ResetPass:
      properties:
        activation_key:
          type: string
          title: Activation Key
        pass_:
          type: string
          title: 'Pass '
        pass2:
          type: string
          title: Pass2
        OTPCode:
          type: string
          title: Otpcode
        tokenCaptcha:
          type: string
          title: Tokencaptcha
      type: object
      required:
        - activation_key
        - pass_
        - pass2
        - tokenCaptcha
      title: ResetPass
    Site:
      properties:
        domain:
          type: string
          title: Domain
      type: object
      title: Site
    Social_Networks:
      properties:
        name:
          type: string
          title: Name
        icon:
          type: string
          title: Icon
      type: object
      required:
        - name
      title: Social_Networks
    Social_Networks_User:
      properties:
        gallery_id:
          type: string
          format: uuid
          title: Gallery Id
        social_network_id:
          type: string
          format: uuid
          title: Social Network Id
        name:
          type: string
          title: Name
        url:
          type: string
          title: Url
      type: object
      required:
        - gallery_id
        - social_network_id
        - name
        - url
      title: Social_Networks_User
    Support:
      properties:
        subject:
          type: string
          title: Subject
        message:
          type: string
          title: Message
        company:
          type: string
          title: Company
        attached:
          items: {}
          type: array
          title: Attached
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        email:
          type: string
          title: Email
        domain:
          type: string
          title: Domain
      type: object
      required:
        - subject
        - message
        - tokenCaptcha
        - email
      title: Support
      company: My Company
      attached: []
      tokenCaptcha: XXXX_XXXXXX_XXXXX_XXXXX
      message: qwerqw
      name: My Name
      subject: FAILURE
    Token:
      properties:
        access_token:
          type: string
          title: Access Token
        refresh_token:
          type: string
          title: Refresh Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
        - access_token
        - token_type
      title: Token
    UpdateGallery:
      properties:
        admin:
          type: string
          format: uuid
          title: Admin
        name:
          type: string
          title: Name
        url:
          type: string
          title: Url
        color_1:
          type: string
          title: Color 1
        color_2:
          type: string
          title: Color 2
        footer_type:
          type: string
          title: Footer Type
        logo_1:
          type: string
          title: Logo 1
        logo_2:
          type: string
          title: Logo 2
        avatar:
          type: string
          title: Avatar
        front_image:
          type: string
          title: Front Image
        category:
          type: string
          title: Category
        category_id:
          type: string
          format: uuid
          title: Category Id
        type:
          type: string
          title: Type
        social_links:
          items:
            $ref: '#/components/schemas/Social_Networks_User'
          type: array
          title: Social Links
        type_alias:
          type: string
          title: Type Alias
      type: object
      required:
        - social_links
      title: UpdateGallery
    User:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        username:
          type: string
          title: Username
        email:
          type: string
          title: Email
        password:
          type: string
          title: Password
        firstname:
          type: string
          title: Firstname
        lastname_1:
          type: string
          title: Lastname 1
        lastname_2:
          type: string
          title: Lastname 2
        phone:
          type: string
          title: Phone
        id_number:
          type: string
          title: Id Number
        validation_token:
          type: string
          format: uuid
          title: Validation Token
        user_type:
          type: integer
          title: User Type
        disabled:
          type: boolean
          title: Disabled
      type: object
      required:
        - username
        - user_type
      title: User
      example:
        username: Jhon Smith488
        email: foo_721@email.dmn
        password: 123Abc579
        firstname: Jhon
        lastname: Smith
    UserAvatarUpdate:
      properties:
        avatar:
          type: string
          title: Avatar
      type: object
      required:
        - avatar
      title: UserAvatarUpdate
    UserData:
      properties:
        name:
          type: string
          title: Name
        lastName:
          type: string
          title: Lastname
        address:
          type: string
          title: Address
        professionalActivity:
          type: string
          title: Professionalactivity
        nif:
          type: string
          title: Nif
        nationality:
          type: string
          title: Nationality
        infoTest:
          items: {}
          type: array
          title: Infotest
        suitabilityTest:
          items: {}
          type: array
          title: Suitabilitytest
        payTest:
          items: {}
          type: array
          title: Paytest
      type: object
      required:
        - name
        - lastName
        - address
        - professionalActivity
        - nationality
        - infoTest
        - suitabilityTest
        - payTest
      title: UserData
    UserDataCompany:
      properties:
        name:
          type: string
          title: Name
        lastName:
          type: string
          title: Lastname
        address:
          type: string
          title: Address
        professionalActivity:
          type: string
          title: Professionalactivity
        nationality:
          type: string
          title: Nationality
        company_name:
          type: string
          title: Company Name
        company_nif:
          type: string
          title: Company Nif
        company_legal_form:
          type: string
          title: Company Legal Form
        company_address:
          type: string
          title: Company Address
        company_jurisdiction:
          type: string
          title: Company Jurisdiction
        administration_id:
          type: string
          title: Administration Id
        control_structure:
          type: string
          title: Control Structure
        selectors:
          items: {}
          type: array
          title: Selectors
        infoTest:
          items: {}
          type: array
          title: Infotest
        suitabilityTest:
          items: {}
          type: array
          title: Suitabilitytest
        payTest:
          items: {}
          type: array
          title: Paytest
      type: object
      required:
        - name
        - lastName
        - address
        - professionalActivity
        - nationality
        - company_name
        - company_nif
        - company_legal_form
        - company_address
        - company_jurisdiction
        - administration_id
        - control_structure
        - selectors
        - infoTest
        - suitabilityTest
        - payTest
      title: UserDataCompany
    UserExtraImageUpdate:
      properties:
        extra_image:
          type: string
          title: Extra Image
      type: object
      required:
        - extra_image
      title: UserExtraImageUpdate
    UserGalleryRegister:
      properties:
        device:
          type: string
          title: Device
        username:
          type: string
          title: Username
        firstname:
          type: string
          title: Firstname
        lastname_1:
          type: string
          title: Lastname 1
        lastname_2:
          type: string
          title: Lastname 2
        email:
          type: string
          title: Email
        phone:
          type: string
          title: Phone
        ip:
          type: string
          title: Ip
        password:
          type: string
          title: Password
        place:
          type: string
          title: Place
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        language:
          type: string
          title: Language
        baseUrl:
          type: string
          title: Baseurl
        id_number:
          type: string
          title: Id Number
        user_type:
          type: string
          title: User Type
        validation_token:
          type: string
          format: uuid
          title: Validation Token
        site_id:
          type: string
          format: uuid
          title: Site Id
        gallery:
          $ref: '#/components/schemas/Gallery'
      type: object
      required:
        - device
        - username
        - firstname
        - lastname_1
        - email
        - phone
        - ip
        - password
        - place
        - tokenCaptcha
        - id_number
        - gallery
      title: UserGalleryRegister
    UserRegister:
      properties:
        device:
          type: string
          title: Device
        username:
          type: string
          title: Username
        firstname:
          type: string
          title: Firstname
        lastname_1:
          type: string
          title: Lastname 1
        lastname_2:
          type: string
          title: Lastname 2
        phone:
          type: string
          title: Phone
        id_number:
          type: string
          title: Id Number
        email:
          type: string
          title: Email
        ip:
          type: string
          title: Ip
        password:
          type: string
          title: Password
        place:
          type: string
          title: Place
        tokenCaptcha:
          type: string
          title: Tokencaptcha
        user_type:
          type: integer
          title: User Type
        language:
          type: string
          title: Language
        site_id:
          type: string
          format: uuid
          title: Site Id
        validation_token:
          type: string
          format: uuid
          title: Validation Token
      type: object
      required:
        - device
        - username
        - email
        - ip
        - password
        - place
        - tokenCaptcha
      title: UserRegister
      example:
        email: foo_191@email.dmn
        password: 123Abc880
        username: Jhon 383
        tokenCaptcha: >-
          03AGdBq25liKlVUFdRA70STpz1Es18TpMDIKCT29lE7X1ZF0v7KMoOJyov0G1oYOs-eh2E8_FnqQfcJ_Hr0fRkkxqc8AUThKqZg6b-dDhng-vyNH746zD8EFoymxGJuaz4mLseOTEZqESjwRLbn3D_kIuIvX4lxfwBKxkXc-YIW2ABPbhCBLHeNzMvyRrL9J6ZmozgT361wr5xhS854iAHkS7NWNg8A1G0LKdGl_zHBJikBarcGDI1nfXEE9NiVa6NFBljMsxJzCWGwG3vXOGDrQInaRuKS8THMKvCinpFkciCJi38tScDFLie_-m1PwWY_z0-_VKU0ZaOInjMkviBg8Wqm20YzLdvrDZ3cJxlnnFD9fyCvy1WoG1gXHzX5-S9--gsYsFlZKaibs3KeGFPHcfexBHUsHqnlcCTb8ddHYRFRUZZyiJu6emv1Y1jFT_qzj9TfFWFI7zG
        device: >-
          Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)
          Chrome/97.0.4692.71 Safari/537.36
        place: '38.4718701, -0.7818182'
        ip: 127.0.0.1
        language: en
    UserSiteImageUpdate:
      properties:
        site_image:
          type: string
          title: Site Image
      type: object
      required:
        - site_image
      title: UserSiteImageUpdate
    UserUpdate:
      properties:
        username:
          type: string
          title: Username
        firstname:
          type: string
          title: Firstname
        lastname_1:
          type: string
          title: Lastname 1
        lastname_2:
          type: string
          title: Lastname 2
        phone:
          type: string
          title: Phone
        id_number:
          type: string
          title: Id Number
        disabled:
          type: boolean
          title: Disabled
      type: object
      title: UserUpdate
      example:
        username: Jhon Smith
        firstname: Jhon
        lastname_1: Smith
        lastname_2: Smith
        phone: '12345467'
        id_number: 41070240Z
    ValidateOTPCode:
      properties:
        OTPCode:
          type: string
          title: Otpcode
        pass_:
          type: string
          title: 'Pass '
      type: object
      required:
        - OTPCode
        - pass_
      title: ValidateOTPCode
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    Withdrawal:
      properties:
        wallet_user_uuid:
          type: string
          format: uuid
          title: Wallet User Uuid
        wallet_uuid:
          type: string
          format: uuid
          title: Wallet Uuid
        asset_symbol:
          type: string
          title: Asset Symbol
        ledger_symbol:
          type: string
          title: Ledger Symbol
        wallet_address:
          type: string
          title: Wallet Address
        transaction_id:
          type: string
          title: Transaction Id
        amount:
          type: string
          title: Amount
        receiver:
          type: string
          title: Receiver
        receiver_uuid:
          type: string
          format: uuid
          title: Receiver Uuid
        internal:
          type: boolean
          title: Internal
        validation_token:
          type: string
          title: Validation Token
      type: object
      required:
        - asset_symbol
        - amount
        - receiver
      title: Withdrawal
      example:
        asset_symbol: ETH
        amount: '0.00000001'
        receiver: '0xed5082622e31efa9324d899940aa58e05579fe6d'
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: token
