from typing import List

import dlt
from dlt.extract.source import DltResource

from rest_api.typing import RESTAPIConfig
from rest_api import rest_api_source

@dlt.source(name="{{source_name}}", max_table_nesting=2)
def {{ source_name }}(
        {% if credentials %}
        credentials: {{ credentials.type_hint }} = dlt.secrets.value,
        {% endif %}
        base_url: str = dlt.config.value,
) -> List[DltResource]:

    # source configuration
    source_config: RESTAPIConfig = {
        "client": {
            "base_url": base_url,
        },
        "resources": 
        [
        # root endpoints
        {% for r_endpoint in endpoint_collection.root_endpoints %}
        {
            "name": "{{ r_endpoint.python_name }}",
            "endpoint": {
                "data_selector": "{{ r_endpoint.data_json_path }}",
                "path": "{{r_endpoint.path }}",
            }
        },
        {% endfor %}
        # child endpoints
        {% for t_endpoint in endpoint_collection.transformer_endpoints %}
        {
            "name": "{{ t_endpoint.python_name }}",
            "endpoint": {
                "data_selector": "{{ t_endpoint.data_json_path }}",
                "path": "{{t_endpoint.path }}",
                "params": {
                    {% for key, value in t_endpoint.transformer.path_params_mapping.items() %}
                    "{{key}}": {
                        "type": "resolve",
                        "resource": "{{t_endpoint.parent.python_name }}",
                        "field": "{{value}}",
                    },
                    {% endfor %}
                },
            },
        },
        {% endfor %}
        ]
    }

    return rest_api_source(source_config)

